import streamlit as st
import random
import pandas as pd
import math
import re

# --- CONFIGURACI√ìN DE LA P√ÅGINA ---
st.set_page_config(
    page_title="Asistente de Instrumentaci√≥n v7.1 JR - Corregido",
    page_icon="üõ†Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- ESTILOS CSS MEJORADOS ---
st.markdown("""
<style>
    .st-expander {
        border: 2px solid #2C3E50;
        border-radius: 15px;
        margin-bottom: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .st-expander header {
        background: linear-gradient(90deg, #3498DB, #2C3E50);
        color: white;
        border-radius: 12px 12px 0 0;
        font-weight: bold;
        padding: 10px;
    }
    [data-testid="stMetricValue"] {
        font-size: 28px;
        color: #0066CC;
        font-weight: bold;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        color: #155724;
    }
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        color: #721c24;
    }
    .info-box {
        background-color: #e2f3ff;
        border: 1px solid #b8daff;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        color: #004085;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        color: #856404;
    }
    .results-container {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 20px;
        margin-top: 15px;
    }
</style>
""", unsafe_allow_html=True)

# --- BASES DE DATOS EXPANDIDAS (DICCIONARIOS ISA-5.1) ---

FIRST_LETTER = {
    'A': 'An√°lisis', 'B': 'Llama (Burner)', 'C': 'Conductividad', 'D': 'Densidad o Peso Espec√≠fico', 'E': 'Tensi√≥n (Voltaje)',
    'F': 'Caudal (Flow)', 'G': 'Calibre/Dimensi√≥n (Gauge)', 'H': 'Manual (Hand)', 'I': 'Corriente', 'J': 'Potencia',
    'K': 'Tiempo o Programa', 'L': 'Nivel (Level)', 'M': 'Humedad (Moisture)', 'N': 'Definido por Usuario', 'O': 'Definido por Usuario',
    'P': 'Presi√≥n o Vac√≠o', 'Q': 'Cantidad', 'R': 'Radiactividad', 'S': 'Velocidad o Frecuencia', 'T': 'Temperatura',
    'U': 'Multivariable', 'V': 'Vibraci√≥n o An√°lisis Mec√°nico', 'W': 'Peso o Fuerza', 'X': 'Sin clasificar', 'Y': 'Evento, Estado o Presencia', 'Z': 'Posici√≥n o Dimensi√≥n'
}

SUCCESSOR_LETTERS = {
    'A': 'Alarma', 'B': 'Definido por Usuario', 'C': 'Control', 'D': 'Diferencial', 'E': 'Elemento Primario (Sensor)',
    'F': 'Relaci√≥n (Ratio)', 'G': 'Visor o Vidrio (Glass)', 'H': 'Alto', 'I': 'Indicaci√≥n', 'J': 'Exploraci√≥n (Scan)',
    'K': 'Estaci√≥n de Control', 'L': 'Luz Piloto o Bajo', 'M': 'Medio o Intermedio', 'N': 'Definido por Usuario',
    'O': 'Orificio de Restricci√≥n', 'P': 'Punto de Prueba', 'Q': 'Integrador o Totalizador', 'R': 'Registro (Recorder)',
    'S': 'Interruptor (Switch) o Seguridad', 'T': 'Transmisi√≥n', 'U': 'Multifunci√≥n', 'V': 'V√°lvula, Damper o Actuador',
    'W': 'Pozo (Well)', 'X': 'Accesorio o Sin clasificar', 'Y': 'Rel√©, Convertidor o Computador', 'Z': 'Elemento Final de Control (no clasificado)'
}

INSTRUMENT_DATABASE = {
    # Instrumentos de Presi√≥n
    'PI': {'variable': 'Presi√≥n', 'funcion': 'Indicador', 'rango_tipico': '0-10 bar', 'exactitud_tipica': '¬±0.5%'},
    'PIT': {'variable': 'Presi√≥n', 'funcion': 'Indicador-Transmisor', 'rango_tipico': '0-25 bar', 'exactitud_tipica': '¬±0.25%'},
    'PIC': {'variable': 'Presi√≥n', 'funcion': 'Indicador-Controlador', 'rango_tipico': '0-16 bar', 'exactitud_tipica': '¬±0.5%'},
    'PIR': {'variable': 'Presi√≥n', 'funcion': 'Indicador-Registrador', 'rango_tipico': '0-40 bar', 'exactitud_tipica': '¬±0.3%'},
    'PSH': {'variable': 'Presi√≥n', 'funcion': 'Switch Alto', 'rango_tipico': '0-100 bar', 'exactitud_tipica': '¬±1%'},
    'PSL': {'variable': 'Presi√≥n', 'funcion': 'Switch Bajo', 'rango_tipico': '0-50 bar', 'exactitud_tipica': '¬±1%'},
    'PDI': {'variable': 'Presi√≥n Diferencial', 'funcion': 'Indicador', 'rango_tipico': '0-2500 mmH2O', 'exactitud_tipica': '¬±0.5%'},
    'PDT': {'variable': 'Presi√≥n Diferencial', 'funcion': 'Transmisor', 'rango_tipico': '0-6000 mmH2O', 'exactitud_tipica': '¬±0.25%'},
    
    # Instrumentos de Temperatura
    'TI': {'variable': 'Temperatura', 'funcion': 'Indicador', 'rango_tipico': '0-500¬∞C', 'exactitud_tipica': '¬±1¬∞C'},
    'TIT': {'variable': 'Temperatura', 'funcion': 'Indicador-Transmisor', 'rango_tipico': '-50-800¬∞C', 'exactitud_tipica': '¬±0.5¬∞C'},
    'TIC': {'variable': 'Temperatura', 'funcion': 'Indicador-Controlador', 'rango_tipico': '0-1200¬∞C', 'exactitud_tipica': '¬±2¬∞C'},
    'TIR': {'variable': 'Temperatura', 'funcion': 'Indicador-Registrador', 'rango_tipico': '0-600¬∞C', 'exactitud_tipica': '¬±1¬∞C'},
    'TSH': {'variable': 'Temperatura', 'funcion': 'Switch Alto', 'rango_tipico': '0-300¬∞C', 'exactitud_tipica': '¬±3¬∞C'},
    'TSL': {'variable': 'Temperatura', 'funcion': 'Switch Bajo', 'rango_tipico': '0-200¬∞C', 'exactitud_tipica': '¬±3¬∞C'},
    'TE': {'variable': 'Temperatura', 'funcion': 'Elemento Sensor', 'rango_tipico': '-200-1600¬∞C', 'exactitud_tipica': '¬±0.1¬∞C'},
    'TT': {'variable': 'Temperatura', 'funcion': 'Transmisor', 'rango_tipico': '-40-850¬∞C', 'exactitud_tipica': '¬±0.3¬∞C'},
    
    # Instrumentos de Nivel
    'LI': {'variable': 'Nivel', 'funcion': 'Indicador', 'rango_tipico': '0-100%', 'exactitud_tipica': '¬±1%'},
    'LIT': {'variable': 'Nivel', 'funcion': 'Indicador-Transmisor', 'rango_tipico': '0-10 m', 'exactitud_tipica': '¬±0.5%'},
    'LIC': {'variable': 'Nivel', 'funcion': 'Indicador-Controlador', 'rango_tipico': '0-5 m', 'exactitud_tipica': '¬±1%'},
    'LSH': {'variable': 'Nivel', 'funcion': 'Switch Alto', 'rango_tipico': '0-20 m', 'exactitud_tipica': '¬±2%'},
    'LSL': {'variable': 'Nivel', 'funcion': 'Switch Bajo', 'rango_tipico': '0-15 m', 'exactitud_tipica': '¬±2%'},
    'LT': {'variable': 'Nivel', 'funcion': 'Transmisor', 'rango_tipico': '0-30 m', 'exactitud_tipica': '¬±0.25%'},
    'LG': {'variable': 'Nivel', 'funcion': 'Visor/Indicador Visual', 'rango_tipico': '0-3 m', 'exactitud_tipica': '¬±5%'},
    
    # Instrumentos de Caudal
    'FI': {'variable': 'Caudal', 'funcion': 'Indicador', 'rango_tipico': '0-1000 m¬≥/h', 'exactitud_tipica': '¬±1%'},
    'FIT': {'variable': 'Caudal', 'funcion': 'Indicador-Transmisor', 'rango_tipico': '0-500 m¬≥/h', 'exactitud_tipica': '¬±0.5%'},
    'FIC': {'variable': 'Caudal', 'funcion': 'Indicador-Controlador', 'rango_tipico': '0-2000 m¬≥/h', 'exactitud_tipica': '¬±1%'},
    'FT': {'variable': 'Caudal', 'funcion': 'Transmisor', 'rango_tipico': '0-10000 m¬≥/h', 'exactitud_tipica': '¬±0.25%'},
    'FE': {'variable': 'Caudal', 'funcion': 'Elemento Primario', 'rango_tipico': '0-5000 m¬≥/h', 'exactitud_tipica': '¬±2%'},
    'FQ': {'variable': 'Caudal', 'funcion': 'Totalizador', 'rango_tipico': '0-999999 m¬≥', 'exactitud_tipica': '¬±0.1%'},
    
    # Instrumentos de An√°lisis
    'AI': {'variable': 'An√°lisis', 'funcion': 'Indicador', 'rango_tipico': '0-14 pH', 'exactitud_tipica': '¬±0.1 pH'},
    'AIT': {'variable': 'An√°lisis', 'funcion': 'Indicador-Transmisor', 'rango_tipico': '0-20 ppm', 'exactitud_tipica': '¬±2%'},
    'AIC': {'variable': 'An√°lisis', 'funcion': 'Indicador-Controlador', 'rango_tipico': '0-100%', 'exactitud_tipica': '¬±1%'},
    'AT': {'variable': 'An√°lisis', 'funcion': 'Transmisor', 'rango_tipico': '0-1000 ppm', 'exactitud_tipica': '¬±3%'},
    
    # Instrumentos de Conductividad
    'CI': {'variable': 'Conductividad', 'funcion': 'Indicador', 'rango_tipico': '0-2000 ¬µS/cm', 'exactitud_tipica': '¬±2%'},
    'CIT': {'variable': 'Conductividad', 'funcion': 'Indicador-Transmisor', 'rango_tipico': '0-20000 ¬µS/cm', 'exactitud_tipica': '¬±1%'},
    'CT': {'variable': 'Conductividad', 'funcion': 'Transmisor', 'rango_tipico': '0-200000 ¬µS/cm', 'exactitud_tipica': '¬±1.5%'},
    
    # V√°lvulas de Control
    'PCV': {'variable': 'Presi√≥n', 'funcion': 'V√°lvula de Control', 'rango_tipico': 'Cv 0.1-1000', 'exactitud_tipica': '¬±5%'},
    'TCV': {'variable': 'Temperatura', 'funcion': 'V√°lvula de Control', 'rango_tipico': 'Cv 0.5-500', 'exactitud_tipica': '¬±5%'},
    'FCV': {'variable': 'Caudal', 'funcion': 'V√°lvula de Control', 'rango_tipico': 'Cv 1-2000', 'exactitud_tipica': '¬±3%'},
    'LCV': {'variable': 'Nivel', 'funcion': 'V√°lvula de Control', 'rango_tipico': 'Cv 0.2-800', 'exactitud_tipica': '¬±5%'},
    
    # Instrumentos Multivariable
    'UIT': {'variable': 'Multivariable', 'funcion': 'Indicador-Transmisor', 'rango_tipico': 'Variable', 'exactitud_tipica': '¬±0.1%'},
    'UT': {'variable': 'Multivariable', 'funcion': 'Transmisor', 'rango_tipico': 'Variable', 'exactitud_tipica': '¬±0.15%'},
    
    # Instrumentos de Vibraci√≥n
    'VI': {'variable': 'Vibraci√≥n', 'funcion': 'Indicador', 'rango_tipico': '0-50 mm/s', 'exactitud_tipica': '¬±5%'},
    'VIT': {'variable': 'Vibraci√≥n', 'funcion': 'Indicador-Transmisor', 'rango_tipico': '0-100 mm/s', 'exactitud_tipica': '¬±3%'},
    'VT': {'variable': 'Vibraci√≥n', 'funcion': 'Transmisor', 'rango_tipico': '0-200 mm/s', 'exactitud_tipica': '¬±2%'},
    
    # Instrumentos de Peso
    'WI': {'variable': 'Peso', 'funcion': 'Indicador', 'rango_tipico': '0-10000 kg', 'exactitud_tipica': '¬±0.1%'},
    'WIT': {'variable': 'Peso', 'funcion': 'Indicador-Transmisor', 'rango_tipico': '0-50000 kg', 'exactitud_tipica': '¬±0.05%'},
    'WT': {'variable': 'Peso', 'funcion': 'Transmisor', 'rango_tipico': '0-100000 kg', 'exactitud_tipica': '¬±0.03%'},
}

ERROR_TYPES = {
    'A': 'Porcentaje del m√°ximo valor del campo de indicaci√≥n',
    'B': 'Porcentaje del span (rango)',
    'C': 'Porcentaje del valor a medir',
    'D': 'Valor fijo seg√∫n la variable'
}

# --- FUNCIONES DE C√ÅLCULO Y L√ìgica ---

def convert_pressure(value, from_unit, to_unit):
    to_pascal = {
        'Pa': 1, 'kPa': 1000, 'MPa': 1e6, 'bar': 1e5, 'mbar': 100,
        'psi': 6894.76, 'kg/cm¬≤': 98066.5, 'atm': 101325,
        'mmH2O': 9.80665, 'inH2O': 249.089
    }
    if from_unit not in to_pascal or to_unit not in to_pascal: return None
    return (value * to_pascal[from_unit]) / to_pascal[to_unit]

def convert_temperature(value, from_unit, to_unit):
    try:
        if from_unit == '¬∞C': celsius = value
        elif from_unit == '¬∞F': celsius = (value - 32) * 5/9
        elif from_unit == 'K': celsius = value - 273.15
        else: return None

        if to_unit == '¬∞C': return round(celsius, 2)
        elif to_unit == '¬∞F': return round(celsius * 9/5 + 32, 2)
        elif to_unit == 'K': return round(celsius + 273.15, 2)
        else: return None
    except:
        return None

def calculate_cv_liquid(flow_rate, sg, p1, p2):
    if p1 <= p2:
        return None, "La presi√≥n de entrada debe ser mayor que la de salida."
    delta_p = p1 - p2
    cv = flow_rate * math.sqrt(sg / delta_p)
    return round(cv, 2), None

def calculate_orifice_flow(dp, k):
    if dp < 0 or k <=0:
        return None, "La presi√≥n diferencial y el factor K deben ser positivos."
    flow = k * math.sqrt(dp)
    return round(flow, 2), None

def select_instrument_for_measurement(variable_type, measurement_value, accuracy_required=True):
    """Selecciona el instrumento adecuado basado en la variable y exactitud requerida."""
    suitable_instruments = []
    
    for tag, specs in INSTRUMENT_DATABASE.items():
        if variable_type.lower() in specs['variable'].lower():
            # Para medici√≥n con exactitud, el valor debe estar en el 50% del campo de indicaci√≥n
            if accuracy_required:
                # Extraer rango num√©rico del rango t√≠pico
                range_match = re.search(r'(-?\d+(?:\.\d+)?)-(\d+(?:\.\d+)?)', specs['rango_tipico'])
                if range_match:
                    min_range, max_range = float(range_match.group(1)), float(range_match.group(2))
                    optimal_range = (max_range - min_range) * 0.5 + min_range
                    
                    # Verificar si el valor a medir est√° cerca del 50% del rango
                    if abs(measurement_value - optimal_range) / max(optimal_range, 1e-6) <= 0.3:  # ¬±30% del punto √≥ptimo
                        suitable_instruments.append((tag, specs))
            else:
                suitable_instruments.append((tag, specs))
    
    return suitable_instruments

# --- FUNCIONES PARA EL CENTRO DE PR√ÅCTICA (EXPANDIDAS) ---

def generate_scaling_quiz():
    """Genera un ejercicio de escalamiento aleatorio."""
    pv_types = [{'name': 'Presi√≥n', 'units': 'bar'}, {'name': 'Temperatura', 'units': '¬∞C'}, {'name': 'Nivel', 'units': '%'}, {'name': 'Caudal', 'units': 'm¬≥/h'}]
    signal_types = [{'name': 'Corriente', 'units': 'mA', 'lrv': 4, 'urv': 20}, {'name': 'Voltaje', 'units': 'V', 'lrv': 1, 'urv': 5}]
    pv, signal = random.choice(pv_types), random.choice(signal_types)
    lrv_pv, urv_pv = round(random.uniform(0, 50)), round(random.uniform(100, 500))
    
    if random.choice([True, False]): # PV -> OUT
        input_val = round(random.uniform(lrv_pv, urv_pv), 1)
        correct_out = (((input_val - lrv_pv) / (urv_pv - lrv_pv)) * (signal['urv'] - signal['lrv'])) + signal['lrv']
        question = f"Un transmisor de **{pv['name']}** con rango **{lrv_pv} a {urv_pv} {pv['units']}** y salida **{signal['lrv']}-{signal['urv']} {signal['units']}**, ¬øqu√© salida corresponde a **{input_val} {pv['units']}**?"
        correct_answer = f"{correct_out:.2f}"
        unit = signal['units']
        base_value = correct_out
    else: # OUT -> PV
        input_val = round(random.uniform(signal['lrv'], signal['urv']), 2)
        correct_out = (((input_val - signal['lrv']) / (signal['urv'] - signal['lrv'])) * (urv_pv - lrv_pv)) + lrv_pv
        question = f"Un transmisor de **{pv['name']}** con rango **{lrv_pv} a {urv_pv} {pv['units']}** y salida **{signal['lrv']}-{signal['urv']} {signal['units']}**, ¬øqu√© PV corresponde a **{input_val} {signal['units']}**?"
        correct_answer = f"{correct_out:.1f}"
        unit = pv['units']
        base_value = correct_out
        
    options = {correct_answer}
    while len(options) < 4:
        distractor = base_value * random.uniform(0.5, 1.5)
        if abs(distractor - base_value) > 0.1 * base_value:
            options.add(f"{distractor:.2f}" if isinstance(base_value, float) and base_value != int(base_value) else f"{distractor:.1f}")
    
    return question, [f"{o} {unit}" for o in options], f"{correct_answer} {unit}"

def generate_tag_quiz():
    """Genera un ejercicio de identificaci√≥n de tags ISA-5.1."""
    first = random.choice(list(FIRST_LETTER.keys()))
    successors = random.sample(list(SUCCESSOR_LETTERS.keys()), random.randint(1, 2))
    tag = f"{first}{''.join(successors)}-{random.randint(100,999)}"
    
    question = f"¬øQu√© significa el tag **{tag}** seg√∫n ISA-5.1?"
    
    # Respuesta Correcta
    desc = [FIRST_LETTER[first]]
    for letter in successors:
        desc.append(SUCCESSOR_LETTERS[letter])
    correct_answer = " - ".join(desc)
    
    # Distractores
    options = {correct_answer}
    while len(options) < 4:
        w_first = random.choice(list(FIRST_LETTER.values()))
        w_succ = random.sample(list(SUCCESSOR_LETTERS.values()), len(successors))
        distractor = f"{w_first} - {' - '.join(w_succ)}"
        if distractor != correct_answer:
            options.add(distractor)
            
    return question, list(options), correct_answer

def generate_error_quiz():
    """Genera un ejercicio de selecci√≥n de instrumentos y c√°lculo de errores."""
    variables = ['Presi√≥n', 'Temperatura', 'Nivel', 'Caudal']
    variable = random.choice(variables)
    
    # Generar valor a medir
    if variable == 'Presi√≥n':
        measurement_value = round(random.uniform(5, 15), 1)
        unit = 'bar'
    elif variable == 'Temperatura':
        measurement_value = round(random.uniform(100, 400), 0)
        unit = '¬∞C'
    elif variable == 'Nivel':
        measurement_value = round(random.uniform(2, 8), 1)
        unit = 'm'
    else:  # Caudal
        measurement_value = round(random.uniform(50, 500), 0)
        unit = 'm¬≥/h'
    
    # Seleccionar instrumento adecuado
    suitable_instruments = select_instrument_for_measurement(variable, measurement_value, accuracy_required=True)
    
    if not suitable_instruments:
        # Fallback a cualquier instrumento de la variable
        suitable_instruments = select_instrument_for_measurement(variable, measurement_value, accuracy_required=False)
    
    if suitable_instruments:
        selected_instrument = random.choice(suitable_instruments)
        instrument_tag = selected_instrument[0]
        
        question = f"Para medir **{measurement_value} {unit}** de {variable.lower()} con exactitud (valor al 50% del campo de indicaci√≥n), ¬øqu√© instrumento ser√≠a el m√°s adecuado?"
        
        # Generar opciones
        correct_answer = f"{instrument_tag} | {selected_instrument[1]['variable']} - {selected_instrument[1]['funcion']}"
        
        options = {correct_answer}
        # Agregar distractores de otros instrumentos
        all_instruments = list(INSTRUMENT_DATABASE.keys())
        while len(options) < 4:
            distractor_tag = random.choice(all_instruments)
            if distractor_tag != instrument_tag:
                distractor_specs = INSTRUMENT_DATABASE[distractor_tag]
                distractor = f"{distractor_tag} | {distractor_specs['variable']} - {distractor_specs['funcion']}"
                options.add(distractor)
        
        return question, list(options), correct_answer, instrument_tag, measurement_value
    
    return None, None, None, None, None

# --- INTERFAZ DE USUARIO (UI) ---

st.title("üõ†Ô∏è Asistente de Instrumentaci√≥n Industrial v7.1 - Corregido")
st.markdown("*Herramienta avanzada para c√°lculos, interpretaci√≥n de normas, an√°lisis de errores y pr√°ctica profesional*")

with st.sidebar:
    st.header("‚≠ê Tips del Ingeniero")
    tips = [
        "La exactitud no es lo mismo que la repetibilidad. Un instrumento puede ser muy repetible pero poco exacto.",
        "El 'Campo de Medida' (25-75% del rango) es donde un transmisor ofrece su mejor rendimiento.",
        "Un lazo de control se compone de: medici√≥n (sensor), controlador (PLC/DCS) y elemento final (v√°lvula).",
        "La calibraci√≥n en 5 puntos (0%, 25%, 50%, 75%, 100%) es esencial para verificar la linealidad del instrumento.",
        "La hist√©resis es la diferencia entre lecturas ascendentes y descendentes en el mismo punto de medida.",
        "La 'rangeabilidad' (turndown) indica cu√°nto se puede reducir el rango de un transmisor sin perder la exactitud especificada.",
        "En la selecci√≥n de v√°lvulas de control, un Cv calculado debe quedar idealmente entre el 20% y 80% del recorrido de la v√°lvula.",
        "La presi√≥n diferencial para medir caudal con placa de orificio var√≠a con el cuadrado del flujo ($ŒîP ‚àù Q^2$).",
        "Para medici√≥n con exactitud, el valor a medir debe estar cerca del 50% del campo de indicaci√≥n del instrumento.",
        "Los errores tipo A se expresan como % del m√°ximo del rango, tipo B como % del span, tipo C como % del valor medido.",
    ]
    if 'tip_index' not in st.session_state:
        st.session_state.tip_index = random.randint(0, len(tips)-1)
    st.info(f"üí° {tips[st.session_state.tip_index]}")
    if st.button("Siguiente Tip üí°"):
        st.session_state.tip_index = (st.session_state.tip_index + 1) % len(tips)
        st.rerun()

    st.divider()
    st.header("üìã Referencia R√°pida ISA-5.1")
    st.selectbox("Primera Letra (Variable)", options=list(FIRST_LETTER.items()), format_func=lambda x: f"{x[0]} - {x[1]}", key="sb_first")
    st.selectbox("Letras Sucesivas (Funci√≥n)", options=list(SUCCESSOR_LETTERS.items()), format_func=lambda x: f"{x[0]} - {x[1]}", key="sb_succ")
    
    st.subheader("üîß Instrumentos Comunes")
    common_instruments = ['PIT', 'TIT', 'FIT', 'LIT', 'PDT', 'TT', 'FT', 'LT']
    selected_inst = st.selectbox("Ver especificaciones:", common_instruments)
    if selected_inst in INSTRUMENT_DATABASE:
        specs = INSTRUMENT_DATABASE[selected_inst]
        st.write(f"**{specs['variable']}** - {specs['funcion']}")
        st.write(f"Rango t√≠pico: {specs['rango_tipico']}")
        st.write(f"Exactitud t√≠pica: {specs['exactitud_tipica']}")

tab1, tab2, tab3, tab4, tab5 = st.tabs(["**üìê Herramientas de C√°lculo**", "**üìñ Interpretador ISA-5.1**", "**üß† Centro de Pr√°ctica**", "**üîß Conversores de Unidades**", "**‚ö†Ô∏è An√°lisis de Errores**"])

with tab1:
    st.header("C√°lculos Fundamentales de Instrumentaci√≥n")
    
    with st.expander("**üìà Calculadora de Escalamiento y Tabla de Calibraci√≥n**", expanded=True):
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("Variable de Proceso (PV)")
            pv_units = st.text_input("Unidades PV", "kPa")
            lrv_pv = st.number_input("LRV (L√≠mite Inferior del Rango)", value=0.0, format="%.2f")
            urv_pv = st.number_input("URV (L√≠mite Superior del Rango)", value=1000.0, format="%.2f")
        with col2:
            st.subheader("Se√±al de Salida (OUT)")
            out_units = st.text_input("Unidades Salida", "mA")
            lrv_out = st.number_input("LRV Salida", value=4.0, format="%.2f")
            urv_out = st.number_input("URV Salida", value=20.0, format="%.2f")
        
        st.subheader("üéØ Puntos de Verificaci√≥n")
        percentages = [0, 25, 50, 75, 100]
        
        st.divider()
        if urv_pv > lrv_pv and urv_out > lrv_out:
            span_pv = urv_pv - lrv_pv
            span_out = urv_out - lrv_out
            
            st.subheader("üìä Tabla de Puntos de Verificaci√≥n (0-25-50-75-100%)")
            table_data = {
                "Porcentaje (%)": percentages,
                f"Variable de Proceso ({pv_units})": [lrv_pv + (p/100) * span_pv for p in percentages],
                f"Se√±al de Salida ({out_units})": [lrv_out + (p/100) * span_out for p in percentages]
            }
            df = pd.DataFrame(table_data)
            st.dataframe(df.style.format({df.columns[1]: "{:.2f}", df.columns[2]: "{:.2f}"}), use_container_width=True)
            
            optimal_value = lrv_pv + 0.5 * span_pv
            st.info(f"üéØ **Campo de Medida √ìptimo (50%):** {optimal_value:.2f} {pv_units} - Para m√°xima exactitud, mida cerca de este valor.")
            
        else:
            st.error("El valor URV debe ser mayor que el LRV para ambos rangos.")

    with st.expander("**Î∞∏ Calculadora de Coeficiente de V√°lvula (Cv) para L√≠quidos**"):
        st.latex(r"C_v = Q \sqrt{\frac{SG}{\Delta P}}")
        c1, c2, c3 = st.columns(3)
        flow_rate_q = c1.number_input("Caudal (Q) [GPM]", value=100.0, format="%.2f")
        sg = c2.number_input("Gravedad Espec√≠fica (SG)", value=1.0, format="%.2f", help="Para agua, SG=1")
        
        c1b, c2b = st.columns(2)
        p1 = c1b.number_input("Presi√≥n de Entrada (P1) [psi]", value=50.0, format="%.2f")
        p2 = c2b.number_input("Presi√≥n de Salida (P2) [psi]", value=30.0, format="%.2f")
        
        if st.button("Calcular Cv"):
            cv, error_msg = calculate_cv_liquid(flow_rate_q, sg, p1, p2)
            if error_msg:
                st.error(error_msg)
            else:
                st.metric("Coeficiente de V√°lvula Requerido (Cv)", f"{cv}")
                st.info(f"Seleccione una v√°lvula con un Cv nominal mayor a **{cv}**. Se recomienda que este valor est√© entre el 20% y 80% del rango de operaci√≥n de la v√°lvula seleccionada.")

    with st.expander("**üéõÔ∏è Calculadora de Caudal por Placa de Orificio**"):
        st.latex(r"Q = K \sqrt{\Delta P}")
        k_factor = st.number_input("Factor K del Medidor", value=50.0, format="%.3f", help="Este factor depende de la geometr√≠a de la tuber√≠a, la placa y las propiedades del fluido.")
        delta_p = st.number_input("Presi√≥n Diferencial (ŒîP) [inH2O]", value=100.0, format="%.2f")
        
        if st.button("Calcular Caudal"):
            flow, error_msg = calculate_orifice_flow(delta_p, k_factor)
            if error_msg:
                st.error(error_msg)
            else:
                st.metric("Caudal Calculado (Q)", f"{flow} unidades de caudal")

with tab2:
    st.header("üìñ Interpretador de Tags de Instrumentaci√≥n (ISA-5.1)")
    st.info("Introduce un tag de instrumento (ej: `TIC-101`, `PDT-50A`, `LSHH-203`) para ver su significado desglosado seg√∫n la norma ISA-5.1.")
    
    tag_input = st.text_input("**Introduce el Tag del Instrumento:**", "TIC-101A").upper()
    
    if tag_input:
        match = re.match(r'^([A-Z]{1,4})(\d+)([A-Z]*)$', tag_input.replace('-', ''))
        
        if match:
            letters, loop_num, suffix = match.groups()
            
            st.subheader(f"An√°lisis del Tag: **{tag_input}**")
            
            c1, c2, c3 = st.columns(3)
            c1.metric("Identificaci√≥n de Letras", letters)
            c2.metric("N√∫mero de Lazo", loop_num)
            c3.metric("Sufijo (si aplica)", suffix if suffix else "N/A")
            
            st.markdown("---")
            
            descriptions = []
            first_letter = letters[0]
            if first_letter in FIRST_LETTER:
                descriptions.append(f"**{first_letter}** (Primera Letra): **{FIRST_LETTER[first_letter]}**. Esta es la variable medida o iniciadora.")
            else:
                descriptions.append(f"**{first_letter}**: Letra desconocida.")
                
            for i, letter in enumerate(letters[1:]):
                if letter in SUCCESSOR_LETTERS:
                    descriptions.append(f"**{letter}** (Letra Sucesiva {i+1}): **{SUCCESSOR_LETTERS[letter]}**. Describe una funci√≥n del instrumento.")
                else:
                    descriptions.append(f"**{letter}**: Letra desconocida.")
            
            st.markdown("<ul>" + "".join([f"<li>{d}</li>" for d in descriptions]) + "</ul>", unsafe_allow_html=True)

            st.markdown("---")
            
            if letters in INSTRUMENT_DATABASE:
                specs = INSTRUMENT_DATABASE[letters]
                st.success(f"**Instrumento Encontrado en Base de Datos:**")
                col1, col2 = st.columns(2)
                col1.write(f"**Rango T√≠pico:** {specs['rango_tipico']}")
                col2.write(f"**Exactitud T√≠pica:** {specs['exactitud_tipica']}")
            
            full_description = f"{FIRST_LETTER.get(first_letter, 'Variable Desconocida')}"
            functions = [SUCCESSOR_LETTERS.get(l, 'Funci√≥n Desconocida') for l in letters[1:]]
            if functions:
                full_description += " con funciones de " + " y ".join(functions)

            st.success(f"**Resumen:** El tag **{tag_input}** representa un instrumento en el lazo de control **{loop_num}** que es un **{full_description.lower()}**.")

        else:
            st.warning("Formato de tag no reconocido. Por favor, use un formato como 'TIC101' o 'FT-205B'.")

with tab3:
    st.header("üß† Centro de Pr√°ctica y Autoevaluaci√≥n")
    st.info("Pon a prueba tus conocimientos con ejercicios generados aleatoriamente. ¬°Nunca ver√°s dos veces el mismo problema!")
    
    # --- CORRECCI√ìN: Se usa una key √∫nica para el widget `st.radio` para evitar el error de ID duplicado ---
    quiz_type = st.radio("Elige qu√© tema quieres practicar:", [
        "Ejercicios de Escalamiento", 
        "Identificaci√≥n de Tags (ISA-5.1)",
        "Selecci√≥n de Instrumentos y An√°lisis de Errores"
    ], horizontal=True, key="quiz_type_selector")

    # --- Gesti√≥n de estado para los quizzes ---
    if 'current_quiz_type' not in st.session_state or st.session_state.current_quiz_type != quiz_type:
        st.session_state.current_quiz_type = quiz_type
        st.session_state.current_question_data = None
        st.session_state.answer_submitted = False
        st.session_state.quiz_counter = st.session_state.get('quiz_counter', 0) + 1
    
    if 'quiz_stats' not in st.session_state:
        st.session_state.quiz_stats = {'correct': 0, 'total': 0}
    
    # Mostrar estad√≠sticas
    if st.session_state.quiz_stats['total'] > 0:
        accuracy = (st.session_state.quiz_stats['correct'] / st.session_state.quiz_stats['total']) * 100
        st.metric("üìà Tu Rendimiento General", f"{accuracy:.1f}%", 
                 delta=f"{st.session_state.quiz_stats['correct']} de {st.session_state.quiz_stats['total']} correctas")
    st.divider()

    # Generar pregunta si es necesario
    if st.session_state.current_question_data is None:
        if "Escalamiento" in quiz_type:
            st.session_state.current_question_data = generate_scaling_quiz()
        elif "Tags" in quiz_type:
            st.session_state.current_question_data = generate_tag_quiz()
        elif "Selecci√≥n de Instrumentos" in quiz_type:
            result = generate_error_quiz()
            if result[0] is not None:
                st.session_state.current_question_data = result
            else:
                st.error("No se pudo generar el ejercicio. Intente de nuevo.")
                st.session_state.current_question_data = (None, None, None, None, None)

    # Desplegar la pregunta
    if st.session_state.current_question_data and st.session_state.current_question_data[0]:
        data = st.session_state.current_question_data
        question, options, correct_answer = data[0], data[1], data[2]
        
        if "Escalamiento" in quiz_type: st.subheader("üìê Problema de Escalamiento")
        elif "Tags" in quiz_type: st.subheader("üè∑Ô∏è Problema de Identificaci√≥n ISA-5.1")
        elif "Selecci√≥n de Instrumentos" in quiz_type: st.subheader("‚ö†Ô∏è Problema de Selecci√≥n de Instrumentos")
        
        random.shuffle(options)
        unique_key = f"quiz_answer_{st.session_state.quiz_counter}"
        user_answer = st.radio(f"**Problema:** {question}", options, key=unique_key)
        
        col_btn1, col_btn2, _ = st.columns([1, 1, 2])
        
        if col_btn1.button("‚úÖ Verificar Respuesta", key=f"verify_{unique_key}"):
            if not st.session_state.answer_submitted:
                st.session_state.quiz_stats['total'] += 1
                st.session_state.answer_submitted = True
                if user_answer == correct_answer:
                    st.session_state.quiz_stats['correct'] += 1
                    st.markdown('<div class="success-box">üéâ ¬°Correcto! Excelente trabajo.</div>', unsafe_allow_html=True)
                    if "Selecci√≥n de Instrumentos" in quiz_type:
                        instrument_tag = data[3]
                        specs = INSTRUMENT_DATABASE[instrument_tag]
                        st.info(f"**Informaci√≥n del instrumento:** Rango: {specs['rango_tipico']}, Exactitud: {specs['exactitud_tipica']}")
                else:
                    st.markdown(f'<div class="error-box">‚ùå Incorrecto. La respuesta correcta es: **{correct_answer}**</div>', unsafe_allow_html=True)
            else:
                st.info("Ya has verificado esta respuesta. Pasa al siguiente ejercicio.")
                
        if col_btn2.button("‚û°Ô∏è Siguiente Ejercicio", key=f"next_{unique_key}"):
            st.session_state.current_question_data = None
            st.session_state.answer_submitted = False
            st.session_state.quiz_counter += 1
            st.rerun()

with tab4:
    st.header("üîß Conversores de Unidades")
    c1, c2 = st.columns(2)
    
    with c1:
        st.subheader("üå°Ô∏è Conversor de Temperatura")
        temp_val = st.number_input("Valor Temp.", value=25.0, format="%.2f", key="temp_val")
        temp_from = st.selectbox("De:", ('¬∞C', '¬∞F', 'K'), key="temp_from")
        temp_to = st.selectbox("A:", ('¬∞F', '¬∞C', 'K'), index=1, key="temp_to")
        result = convert_temperature(temp_val, temp_from, temp_to)
        if result is not None:
            st.metric(f"Resultado en {temp_to}", f"{result}")

    with c2:
        st.subheader("üìä Conversor de Presi√≥n")
        press_val = st.number_input("Valor Presi√≥n", value=1.0, format="%.3f", key="press_val")
        press_from = st.selectbox("De:", ('bar', 'psi', 'kPa', 'kg/cm¬≤', 'atm', 'mmH2O', 'inH2O'), key="press_from")
        press_to = st.selectbox("A:", ('psi', 'bar', 'kPa', 'kg/cm¬≤', 'atm', 'mmH2O', 'inH2O'), index=1, key="press_to")
        result = convert_pressure(press_val, press_from, press_to)
        if result is not None:
            st.metric(f"Resultado en {press_to}", f"{result:.4f}")

with tab5:
    st.header("‚ö†Ô∏è An√°lisis Guiado de Errores de Instrumentaci√≥n")
    st.info("Define un instrumento y las especificaciones del fabricante para analizar los errores de medici√≥n, inspirado en la metodolog√≠a de tu pizarra.")
    
    with st.expander("**üéØ Configuraci√≥n de An√°lisis de Errores**", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("1. Definir Instrumento")
            units = st.text_input("Unidades de la variable (ej: RPM, bar, ¬∞C)", "RPM")
            min_range = st.number_input("Valor m√≠nimo del campo de indicaci√≥n:", value=0.0, format="%.2f")
            max_range = st.number_input("Valor m√°ximo del campo de indicaci√≥n:", value=900.0, format="%.2f")
            measurement_val = st.number_input(f"Valor a medir ({units}):", value=625.0, format="%.2f")
            
            if max_range <= min_range:
                st.error("El valor m√°ximo debe ser mayor que el m√≠nimo.")
                span = 0
            else:
                span = max_range - min_range
                st.metric("üìè Span del Instrumento", f"{span:.2f} {units}")
        
        with col2:
            st.subheader("2. Especificaciones de Error")
            st.write("*Configure seg√∫n la hoja de datos del fabricante:*")
            error_a = st.number_input("Tipo A: % del M√°ximo del Campo", value=0.5, format="%.3f", help=ERROR_TYPES['A'])
            error_b = st.number_input("Tipo B: % del Span", value=0.5, format="%.3f", help=ERROR_TYPES['B'])
            error_c = st.number_input("Tipo C: % del Valor Medido", value=0.5, format="%.3f", help=ERROR_TYPES['C'])
            error_d = st.number_input(f"Tipo D: Valor Fijo ({units})", value=0.0, format="%.3f", help=ERROR_TYPES['D'])
        
        # --- MEJORA: L√≥gica de c√°lculo y visualizaci√≥n inspirada en la pizarra ---
        if st.button("üßÆ Calcular Errores", use_container_width=True) and span > 0:
            st.markdown("---")
            st.subheader("üìä Resultados del An√°lisis de Errores")
            
            # C√°lculo de errores
            errors = {
                'A': (error_a / 100) * max_range,
                'B': (error_b / 100) * span,
                'C': (error_c / 100) * measurement_val,
                'D': error_d
            }
            
            with st.container():
                st.markdown('<div class="results-container">', unsafe_allow_html=True)
                st.info(f"An√°lisis para una medici√≥n de **{measurement_val:.2f} {units}** en un rango de **{min_range:.2f} a {max_range:.2f} {units}**.")
                
                # Mostrar cada error en una tarjeta
                c1, c2 = st.columns(2)
                with c1:
                    st.markdown(f"**Error Tipo A: {error_a}% del M√°ximo**")
                    st.metric(label=f"C√°lculo: ¬±({error_a}/100) * {max_range:.2f}", value=f"¬± {errors['A']:.3f} {units}")
                    st.markdown(f"**Lectura:** `[{measurement_val - errors['A']:.2f}, {measurement_val + errors['A']:.2f}] {units}`")
                    st.markdown("---")
                    st.markdown(f"**Error Tipo C: {error_c}% del Valor Medido**")
                    st.metric(label=f"C√°lculo: ¬±({error_c}/100) * {measurement_val:.2f}", value=f"¬± {errors['C']:.3f} {units}")
                    st.markdown(f"**Lectura:** `[{measurement_val - errors['C']:.2f}, {measurement_val + errors['C']:.2f}] {units}`")
                
                with c2:
                    st.markdown(f"**Error Tipo B: {error_b}% del Span**")
                    st.metric(label=f"C√°lculo: ¬±({error_b}/100) * {span:.2f}", value=f"¬± {errors['B']:.3f} {units}")
                    st.markdown(f"**Lectura:** `[{measurement_val - errors['B']:.2f}, {measurement_val + errors['B']:.2f}] {units}`")
                    st.markdown("---")
                    st.markdown(f"**Error Tipo D: Valor Fijo**")
                    st.metric(label="Valor de hoja de datos", value=f"¬± {errors['D']:.3f} {units}")
                    st.markdown(f"**Lectura:** `[{measurement_val - errors['D']:.2f}, {measurement_val + errors['D']:.2f}] {units}`")

                # Resumen y recomendaci√≥n
                st.markdown("---")
                max_error_val = max(errors.values())
                max_error_type = max(errors, key=errors.get)
                st.warning(f"‚ö†Ô∏è **Error m√°s cr√≠tico:** Tipo **{max_error_type}** con un valor de **¬±{max_error_val:.3f} {units}**.")

                measurement_percentage = ((measurement_val - min_range) / span) * 100
                if 40 <= measurement_percentage <= 60:
                    st.success(f"‚úÖ **Medici√≥n √≥ptima:** El valor est√° al **{measurement_percentage:.1f}%** del campo (cerca del 50% ideal).")
                else:
                    st.warning(f"**Recomendaci√≥n:** La medici√≥n est√° al **{measurement_percentage:.1f}%** del campo. Para mayor exactitud, considere un instrumento donde este valor se acerque m√°s al 50%.")
                
                st.markdown('</div>', unsafe_allow_html=True)


    with st.expander("üìö Gu√≠a de Tipos de Error"):
        st.markdown("""
        ### Tipos de Error en Instrumentaci√≥n
        
        **Error Tipo A - Porcentaje del m√°ximo valor del campo de indicaci√≥n:**
        - Se calcula como un porcentaje del valor m√°ximo que puede indicar el instrumento (URV).
        - **F√≥rmula:** `Error = (¬± % / 100) * URV`
        - Es un error de valor constante en toda la escala.
        
        **Error Tipo B - Porcentaje del span (rango):**
        - Se calcula como un porcentaje del span completo del instrumento (`URV - LRV`).
        - **F√≥rmula:** `Error = (¬± % / 100) * Span`
        - Tambi√©n es un error de valor constante en toda la escala.

        **Error Tipo C - Porcentaje del valor a medir:**
        - Se calcula como un porcentaje del valor que se est√° midiendo actualmente.
        - **F√≥rmula:** `Error = (¬± % / 100) * Valor Medido`
        - Es un error variable: mayor error a valores m√°s altos y menor error a valores m√°s bajos.
        
        **Error Tipo D - Valor fijo:**
        - Es un error constante, expresado en unidades de la variable, que se suma a los dem√°s errores.
        - Proviene de factores como la resoluci√≥n del sensor.
        """)

st.divider()
st.markdown("""
<div style='text-align: center; color: #666; padding: 20px;'>
    <h4>üõ†Ô∏è Asistente de Instrumentaci√≥n Industrial v7.1</h4>
    <p>Desarrollado para ingenieros y t√©cnicos de instrumentaci√≥n y control | Basado en est√°ndares ISA</p>
</div>
""", unsafe_allow_html=True)
